"""
This file contains routines used to read in data from the SHIELDS-PTM particle tracing
simulation as well as to calculate quantities based on the particle data.

Jesse Woodroffe
last revised 5/23/2016
"""

from numpy import array,size,sqrt,pi,exp,loadtxt,argwhere,sort,unique,zeros,zeros_like
from scipy import special

def parse_ptm_file(fname):
    """
    This routine reads a file of particle trajectory data generated by the ptm simulation. Data from ptm is
    output in formatted ascii, with the time history of a particle trajectory given by a 8-column array with
    an unknown number of rows. The data from each particle is separated by a "#".

    TIME XPOS YPOS ZPOS VPERP VPARA ENERGY PITCHANGLE
    
    Results from this routine are returned as a dictionary with the trajectory of each particle stored under
    a separate integer key (0-based indexing: first particle is 0, second is 1, etc.)

    Jesse Woodroffe
    11/18/2015
    """
    with open(fname,'r') as f:
        flines=f.readlines()
    res=''.join(flines).replace('\n',' ').split(' # ')
    ncol=size(flines[0].strip('\n').lstrip().split('  '))
    dataDict={}
    for i,s in enumerate(res):
        dataVec=array(map(float,s.replace('   ','  ').lstrip().split('  ')))
        dataDict[i]=dataVec.reshape((size(dataVec)/ncol,ncol))
    return dataDict

def parse_map_file(fname):
  """
  This is a convenience routine to read in a "map" file generated by the PTM simulation. Since the particles
  aren't output in a logical or predictable manner, this routine also assembles the energy--pitch-angle grids
  and returns the results in a dictionary. This is all the information that is needed from SHIELDS-PTM to
  assemble flux maps using the energy_to_flux routine.
  
  Jesse Woodroffe
  5/23/2016
  """
  
  res = loadtxt(fname)
  
  pavec = sort(unique(res[:,-2]))
  envec = sort(unique(res[:,-3]))
  
  fluxmap={}
  fluxmap['energies']=envec
  fluxmap['angles']=pavec
  
  Einit = zeros([envec.size,pavec.size])
  Efinal = zeros_like(Einit)
  
  for icount in xrange(size(res,0)):
    idex = argwhere(res[icount,-3]==envec)
    jdex = argwhere(res[icount,-2]==pavec)
    Einit[idex,jdex]=res[icount,-3]
    Efinal[idex,jdex]=res[icount,-1]
  
  fluxmap['init_E']=Einit
  fluxmap['final_E']=Efinal 
  
  return fluxmap

def energy_to_flux(ei,ef,ec,n,mc2=511.0,kind='maxwell',kap=2.5):
    """
    Given the particle energy, number density of particles, and characteristic energy of the distribution,
    calculate the differential energy flux in keV-1 cm-2 s-1 sr-1. All energies should be in keV.
    
    Jesse Woodroffe
    3/30/2016
    """
    
    ckm=2.998e5
    gami=1+ei/mc2
    gamc=1+ec/mc2
    gamf=1+ef/mc2
    u=ckm*sqrt(gami*gami-1.0)/gami
    w=ckm*sqrt(gamc*gamc-1.0)/gamc
    v=ckm*sqrt(gamf*gamf-1.0)/gamf
    
    if(kind=='maxwell'):
        f0=n*pi**-1.5
        f=f0*exp(-(u/w)**2)/w**3
    elif(kind=='kappa'):
        wki=w*sqrt((2*kap-3.0)/kap)
        f0=n/(2*pi)*(kap*wki**2)**-1.5*special.gamma(kap+1)/(special.gamma(kap-0.5)*special.gamma(1.5))
        f=f0*(1+(u/wki)**2/kap)**-(kap+1)
    else:
        f0=n*pi**-1.5
        f=f0*exp(-(u/w)**2)/w**3

    j=1e5*ckm*ckm*v*v/mc2*f

    return j
        